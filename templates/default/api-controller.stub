<?php

namespace [% namespace %];

[% use_command_placeholder %]
use Exception;

class [% controller_name %] [% controller_extends %]
{
[% constructor %]
    /**
     * Display a listing of the assets.
     *
     * @return Illuminate\View\View
     */
    public function index()
    {
        $[% model_name_plural_variable %] = [% model_name_class %]::[% with_relations_for_index %]paginate([% models_per_page %]);

        $[% data_variable %] = $[% model_name_plural_variable %]->transform(function ($[% model_name_singular_variable %]) {
            return $this->transform($[% model_name_singular_variable %]);
        });

        return $this->successResponse(
            [% model_was_added %],
            $[% data_variable %],
            [
                'links' => [
                    'first' => $[% model_name_plural_variable %]->url(1),
                    'last' => $[% model_name_plural_variable %]->url($[% model_name_plural_variable %]->lastPage()),
                    'prev' => $[% model_name_plural_variable %]->previousPageUrl(),
                    'next' => $[% model_name_plural_variable %]->nextPageUrl(),
                ],
                'meta' =>
                [
                    'current_page' => $[% model_name_plural_variable %]->currentPage(),
                    'from' => $[% model_name_plural_variable %]->firstItem(),
                    'last_page' => $[% model_name_plural_variable %]->lastPage(),
                    'path' => $[% model_name_plural_variable %]->resolveCurrentPath(),
                    'per_page' => $[% model_name_plural_variable %]->perPage(),
                    'to' => $[% model_name_plural_variable %]->lastItem(),
                    'total' => $[% model_name_plural_variable %]->total(),
                ],
            ]
        );
    }

    /**
     * Store a new [% model_name %] in the storage.
     *
     * @param [% request_fullname %] [% request_variable %]
     *
     * @return Illuminate\Http\Response
     */
    public function store([% type_hinted_request_name %])
    {
        try {
            $validator = [% call_get_validator %];

            if ($validator->fails()) {
                return $this->errorResponse($validator->errors()->all());
            }

            $[% data_variable %] = [% call_get_data %];
            [% on_store_setter %]
            $[% model_name_singular_variable %] = [% model_name_class %]::create($[% data_variable %]);

            return $this->successResponse(
                [% model_was_added %],
                $this->transform($[% model_name_singular_variable %])
            );
        } catch (Exception $exception) {
            return $this->errorResponse([% unexpected_error %]);
        }
    }

    /**
     * Display the specified [% model_name %].
     *
     * @param int $id
     *
     * @return Illuminate\Http\Response
     */
    public function show($id)
    {
        $[% model_name_singular_variable %] = [% model_name_class %]::[% with_relations_for_show %]findOrFail($id);

        return $this->successResponse(
            [% model_was_retrieved %],
            $this->transform($[% model_name_singular_variable %])
        );
    }

    /**
     * Update the specified [% model_name %] in the storage.
     *
     * @param int $id
     * @param [% request_fullname %] [% request_variable %]
     *
     * @return Illuminate\Http\Response
     */
    public function update($id, [% type_hinted_request_name %])
    {
        try {
            $validator = [% call_get_validator %];

            if ($validator->fails()) {
                return $this->errorResponse($validator->errors()->all());
            }

            $[% data_variable %] = [% call_get_data %];
            [% on_update_setter %]
            $[% model_name_singular_variable %] = [% model_name_class %]::findOrFail($id);
            $[% model_name_singular_variable %]->update($[% data_variable %]);

            return $this->successResponse(
                [% model_was_updated %],
                $this->transform($[% model_name_singular_variable %])
            );
        } catch (Exception $exception) {
            return $this->errorResponse([% unexpected_error %]);
        }
    }

    /**
     * Remove the specified [% model_name %] from the storage.
     *
     * @param int $id
     *
     * @return Illuminate\Http\Response
     */
    public function destroy($id)
    {
        try {
            $[% model_name_singular_variable %] = [% model_name_class %]::findOrFail($id);
            $[% model_name_singular_variable %]->delete();

            return $this->successResponse(
                [% model_was_deleted %],
                $id
            );
        } catch (Exception $exception) {
            return $this->errorResponse([% unexpected_error %]);
        }
    }
[% get_validator_method %]
[% get_data_method %]
[% upload_method %]
[% transform_method %]
[% response_methods %]
}
