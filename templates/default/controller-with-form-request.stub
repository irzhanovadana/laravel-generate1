<?php

namespace DummyNamespace;

use Session;
use DummyRootNamespaceHttp\Controllers\Controller;
use {{formRequestFullName}};
{{useCommandPlaceHolder}}

class DummyClass extends Controller
{

    /**
     * Display a listing of the {{modelNamePlural}}.
     *
     * @return Illuminate\View\View
     */
    public function index()
    {
        ${{modelNamePlural}} = {{modelNameClass}}::{{withRelationsForIndex}}paginate({{modelsPerPage}});

        return view('{{indexViewName}}'{{viewVariablesForIndex}});
    }

    /**
     * Show the form for creating a new {{modelName}}.
     *
     * @return Illuminate\View\View
     */
    public function create()
    {
        {{relationCollections}}
        return view('{{createViewName}}'{{viewVariablesForCreate}});
    }

    /**
     * Store a new {{modelName}} in the storage.
     *
     * @param DummyRootNamespace{{formRequestFullName}} $request
     *
     * @return Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store({{formRequestName}} $request)
    {
        {{modelNameClass}}::create($this->getRequestsData($request));

        Session::flash('success_message', '{{modelNameClass}} was added!');

        return redirect()->route('{{indexRouteName}}');
    }

    /**
     * Display the specified {{modelName}}.
     *
     * @param int $id
     *
     * @return Illuminate\View\View
     */
    public function show($id)
    {
        ${{modelName}} = {{modelNameClass}}::{{withRelationsForShow}}findOrFail($id);

        return view('{{showViewName}}'{{viewVariablesForShow}});
    }

    /**
     * Show the form for editing the specified {{modelName}}.
     *
     * @param int $id
     *
     * @return Illuminate\View\View
     */
    public function edit($id)
    {
        ${{modelName}} = {{modelNameClass}}::findOrFail($id);
        {{relationCollections}}
        return view('{{editViewName}}'{{viewVariablesForEdit}});
    }

    /**
     * Update the specified {{modelName}} in the storage.
     *
     * @param  int $id
     * @param DummyRootNamespace{{formRequestFullName}} $request
     *
     * @return Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update($id, {{formRequestName}} $request)
    {
        ${{modelName}} = {{modelNameClass}}::findOrFail($id);

        ${{modelName}}->update($this->getRequestsData($request));

        Session::flash('success_message', '{{modelNameClass}} was updated!');

        return redirect()->route('{{indexRouteName}}');
    }

    /**
     * Remove the specified {{modelName}} from the storage.
     *
     * @param  int $id
     *
     * @return Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
        ${{modelName}} = {{modelNameClass}}::findOrFail($id);

        ${{modelName}}->delete();

        Session::flash('success_message', '{{modelNameClass}} was deleted!');

        return redirect()->route('{{indexRouteName}}');
    }
    
    /**
     * Get the data from the givin request.
     *
     * @param DummyRootNamespace{{formRequestFullName}} $request
     *
     * @return array
     */
    protected function getRequestsData({{formRequestName}} $request)
    {
        $data = $request->all();
{{fileSnippet}}
{{booleanSnippet}}
{{stringToNullSnippet}}
        return $data;
    }
{{uploadMethod}}
}
